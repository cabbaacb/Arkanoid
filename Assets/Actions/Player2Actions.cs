//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Actions/Player2Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player2Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player2Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player2Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""69bbeab8-2f44-4ddf-81b7-c6bfc87e34ec"",
            ""actions"": [
                {
                    ""name"": ""MovingHorizontal"",
                    ""type"": ""Button"",
                    ""id"": ""f4fdecb0-94be-454b-98b5-20bed1b9b8bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovingVertical"",
                    ""type"": ""Button"",
                    ""id"": ""0b92d469-d430-4744-8c17-41bc3e3eabc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Horizontal"",
                    ""id"": ""6a91a88c-8732-423d-b6ee-ab078136a71a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dd4a07e9-4a5a-410a-affb-c87b951f8113"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""47fc9f0d-b278-4c54-a2a3-f73179b81725"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""id"": ""130097d1-aeaf-44fa-b031-95c6e9ce2ea5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""395000ff-084f-4cad-9151-80af30c3907a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6d3ca06b-fb9c-473b-aa64-592923920766"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MovingHorizontal = m_Player.FindAction("MovingHorizontal", throwIfNotFound: true);
        m_Player_MovingVertical = m_Player.FindAction("MovingVertical", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_MovingHorizontal;
    private readonly InputAction m_Player_MovingVertical;
    public struct PlayerActions
    {
        private @Player2Actions m_Wrapper;
        public PlayerActions(@Player2Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovingHorizontal => m_Wrapper.m_Player_MovingHorizontal;
        public InputAction @MovingVertical => m_Wrapper.m_Player_MovingVertical;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @MovingHorizontal.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovingHorizontal;
                @MovingHorizontal.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovingHorizontal;
                @MovingHorizontal.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovingHorizontal;
                @MovingVertical.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovingVertical;
                @MovingVertical.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovingVertical;
                @MovingVertical.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovingVertical;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovingHorizontal.started += instance.OnMovingHorizontal;
                @MovingHorizontal.performed += instance.OnMovingHorizontal;
                @MovingHorizontal.canceled += instance.OnMovingHorizontal;
                @MovingVertical.started += instance.OnMovingVertical;
                @MovingVertical.performed += instance.OnMovingVertical;
                @MovingVertical.canceled += instance.OnMovingVertical;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovingHorizontal(InputAction.CallbackContext context);
        void OnMovingVertical(InputAction.CallbackContext context);
    }
}
